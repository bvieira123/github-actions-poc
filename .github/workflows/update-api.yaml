name: Update API Config
on:
  push:
    branches:
      - main

jobs:
  update_api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changes
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          echo "changes $CHANGES"
          CHANGES=$(echo "$CHANGES" | grep -vE '\.ya?ml$')
          echo "Filtered Changes: $CHANGES"
          CONFIG_FILES=$(echo "$CHANGES" | grep -E '.*-config\.json$' | paste -sd ',')
          API_DEFINITION=$(echo "$CHANGES" | grep -vE '(-config\.json|\.ya?ml)$' | paste -sd ',')
          echo "Filtered changes: $API_DEFINITION"
          CONFIG_FILES=$(echo "$CONFIG_FILES" | sed 's/\.[^.]*$//')
          echo "CONFIG_FILES=$CONFIG_FILES" >> $GITHUB_ENV
          echo "API_DEFINITION=$API_DEFINITION" >> $GITHUB_ENV

      - name: Process API Definitions
        if: env.API_DEFINITION != '' && env.CONFIG_FILES == ''
        run: |
          IFS=',' read -ra ADDR <<< "$API_DEFINITION"
          for value in "${ADDR[@]}"; do
            echo "Processing $value"
            filename="${value##*/}"
            matches=$(grep -rl "$filename" $PWD/*.json)

            # Proper syntax for checking if variable is empty
            if [ -z "${CONFIG_FILES}" ]; then
              CONFIG_FILES="$matches"
            else
              # Ensure not to prepend a comma if no matches found
              if [ -n "$matches" ]; then
                CONFIG_FILES="${CONFIG_FILES},$matches"
              fi
            fi
          done
          # Check and log final value of CONFIG_FILES
          echo "Final CONFIG_FILES: $CONFIG_FILES"
          echo "CONFIG_FILES=$CONFIG_FILES" >> $GITHUB_ENV

      - name: Display Config Files
      
        run: echo "$CONFIG_FILES"
