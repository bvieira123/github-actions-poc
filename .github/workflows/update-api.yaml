name: Update API Config
on:
  push:
    branches:
      - main

jobs:
  update_api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changes
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          CHANGES=$(echo "$CHANGES" | grep -vE '\.ya?ml$')
          CONFIG_FILES=$(echo "$CHANGES" | grep -E '.*-config\.json$' | paste -sd ',')
          API_DEFINITION=$(echo "$CHANGES" | grep -vE '(-config\.json|\.ya?ml)$' | paste -sd ',')
          echo "CONFIG_FILES=$CONFIG_FILES" >> $GITHUB_ENV
          echo "API_DEFINITION=$API_DEFINITION" >> $GITHUB_ENV

      - name: Process API Definitions
        if: env.API_DEFINITION != '' && env.CONFIG_FILES == ''
        run: |
          IFS=',' read -ra ADDR <<< "$API_DEFINITION"
          for file in "${ADDR[@]}"; do
            echo "Processing $file"
            filename="${file##*/}"
            matches=$(grep -rl "$filename" $PWD/*.json)

            # Proper syntax for checking if variable is empty
            if [ -z "${CONFIG_FILES}" ]; then
              CONFIG_FILES="$matches"
            else
              # Ensure not to prepend a comma if no matches found
              if [ -n "$matches" ]; then
                CONFIG_FILES="${CONFIG_FILES},$matches"
              fi
            fi
          done
          # Check and log final value of CONFIG_FILES
          echo "Config file need to be updated: $CONFIG_FILES"
          echo "CONFIG_FILES=$CONFIG_FILES" >> $GITHUB_ENV

      - name: Update api's or trigger import action
        run: |
          IFS=',' read -ra ADDR <<< "$CONFIG_FILES"
          for file in "${ADDR[@]}"; do
            apiDefition=$(jq -r '.apiSpecification.resource' "$file")
            path=$(jq -r '.path' "$file")
            api_exists=$(docker run --name apim-cli \
            bvieira123/apim-cli:1.14.4  \
            apim api get -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port 8075 \
            -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -a "$path" | grep "$path")
            docker rm apim-cli -f
            echo "api exists? $api_exists"
            if [ -z "${api_exists}" ]; then
              docker run --name apim-cli \
              -v "${{ github.workspace }}/$file:/$file" \
              -v "${{ github.workspace }}/$apiDefition:/$apiDefition" bvieira123/apim-cli:1.14.4  \
              apim api import -h ${{ vars.APIM_INSTANCE_IP }} -u ${{ vars.APIM_INSTANCE_USER }} -port 8075 \
              -p ${{ secrets.APIM_INSTANCE_PASSWORD }} -c "/$file" |
            else
              echo "Calling import job..."
              curl \
                -X POST \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ secrets.TOKEN_GITHUB }}" \
                "https://api.github.com/repos/bvieira123/github-actions-poc/actions/workflows/import-api.yaml/dispatches" \
                -d "{\"ref\":\"main\", \"inputs\":{\"config_file\":\"${file}\", \"api_definition\":\"${apiDefinition}\"}}"
            fi
          done